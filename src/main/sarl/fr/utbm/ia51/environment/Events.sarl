/** 
 * 
 */
package fr.utbm.ia51.environment

import fr.utbm.ia51.activities.ActivityType
import fr.utbm.ia51.tools.Point2f
import fr.utbm.ia51.tools.Vector2f
import java.util.ArrayList
import java.util.HashMap
import java.util.UUID

// Perception sent to the agents
event Perception {
	val position : Point2f
	val orientation : Vector2f
	val currentLinearSpeed : float
	val maxLinear : float
	val currentAngularSpeed : float
	val maxAngular : float
	val bellRings : boolean

	// List of the nearest points of the perceived objects (in his view field) and their ActivityType
	val perceivedObjects : HashMap<ActivityType, Point2f>
	
	// List of the nearest points of the perceived people (in his view field)
	val perceivedPeople : ArrayList<Point2f>

	new(position : Point2f, orientation : Vector2f, currentLinearSpeed : float, maxLinear : float,
		currentAngularSpeed : float, maxAngular : float, bellRings : boolean,
		perceivedObjects : HashMap<ActivityType, Point2f>, perceivedPeople : ArrayList<Point2f>)
	{
		this.position = position
		this.orientation = orientation
		this.currentLinearSpeed = currentLinearSpeed
		this.maxLinear = maxLinear
		this.currentAngularSpeed = currentAngularSpeed
		this.maxAngular = maxAngular
		this.bellRings = bellRings
		this.perceivedObjects = perceivedObjects
		this.perceivedPeople = perceivedPeople
	}
}

// Influence sent to the environment by an agent
event Influence {
	val callerID : UUID
	val time : int
	val position : Point2f
	val linear : Vector2f
	val angular : float

	new(callerID : UUID, time : int, position : Point2f, linear : Vector2f, angular : float) {
		this.callerID = callerID
		this.time = time
		this.position = position
		this.linear = linear
		this.angular = angular
	}
}

event ActionToPerson {
	val newPosX : double
	val newPosY : double
	
	new(newPosX : double, newPosY : double) {
		this.newPosX = newPosX
		this.newPosY = newPosY
	}
}

event UpdatedActivity{
	val callerID : UUID
	val activity : ActivityType
	
	new(callerID : UUID, activity : ActivityType){
		this.callerID = callerID
		this.activity = activity
	}
}

// When the loop starts
event RunBeginingOfStep

// When the loop ends
event RunEndOfStep

// When the GUI is closed
event ShutDown