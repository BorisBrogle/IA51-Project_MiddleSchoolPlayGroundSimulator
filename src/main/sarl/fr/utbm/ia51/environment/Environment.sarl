package fr.utbm.ia51.environment

import fr.utbm.ia51.Globals
import fr.utbm.ia51.activities.ActivityType
import fr.utbm.ia51.agents.Person
import fr.utbm.ia51.graph.environment.GraphEnvironment
import fr.utbm.ia51.graph.human.GraphHuman
import fr.utbm.ia51.tools.Point2f
import fr.utbm.ia51.tools.Vector2f
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import java.util.LinkedList
import java.util.UUID
import javafx.^event.ActionEvent
import javafx.scene.control.Button

agent Environment {
	uses Logging, DefaultContextInteractions, Lifecycle
	
	var personIdList = <UUID>newLinkedList
	var influenceList = <Influence>newLinkedList
	
	// This list will be used to fill the following HashMap at some point
	var listGraphHumans = <GraphHuman>newLinkedList
	// This HashMap links the GraphHumans with their person's UUID
	var graphHumans  = <UUID,GraphHuman>newHashMap
	// JavaFX button used to send actions to the environment when we click on the button
	var ringButton : Button 
	
	var numberOfInfluencesGot = 0
	var numberOfInfluencesToGet = 0
	
	// To know if the bell rings or not
	var bellRings = false
	
	on Initialize {	
		synchronized (this) {
			// A GraphHuman is the GUI representation of an agent
			this.listGraphHumans = occurrence.parameters.get(0) as LinkedList<GraphHuman>
			ringButton = this.listGraphHumans.first.graphEnvironment.ringButton
			ringButton.onAction = [e : ActionEvent| this.bellRings = true]
			
			loggingName = "Environment"
			info("The environment was started.")
			
			// For every GraphHuman, we spawn an agent
			var i = 0
			for (g : listGraphHumans) {
				this.graphHumans.put(g.uuid, g)
				g.visible=true;
				spawnAPerson("Person"+i,g,g.environment,i)
				i++
			}
			
			// At the end of the initialization, we start the loop
			emit(new RunBeginningOfStep)
		}
	}

	// Start of the loop
	on RunBeginningOfStep {
		synchronized (this) {
			// The chrono that computes each loop duration is reset at each beginning of loop
			Globals::chrono.reset();

			for (entry : graphHumans.entrySet) {
				var graphHuman = entry.value
				var uuid = entry.key

				// Those variables will be sent in a Perception to the right Person
				var position : Point2f = new Point2f(graphHuman.x, graphHuman.y)
				var orientation : Vector2f = new Vector2f
				var linearSpeed : float = 0f
				var maxLinear : float = 3f
				var angularSpeed : float = 0f
				var maxAngular : float = 0f
				var perceivedObjects = <ActivityType, Point2f>newHashMap
				var perceivedPeople = <Point2f>newArrayList
				
				// Getting every artifact in the agent's view field
				var intersectedArtifacts = graphHuman.environment.getIntersectedArtifacts(graphHuman)

				// For every intersected artifact in the agent's view field
				for (intersectedArtifact : intersectedArtifacts) {
					// We get the nearest point in the artifact
					var intersectedPoint = intersectedArtifact.getNearestPointInEntity(position)

					// If the intersected artifact is actually a person then we add him to the right list
					// because we manage activities and person differently in terms of repulsions
					if (intersectedArtifact instanceof GraphHuman) {
						perceivedPeople.add(intersectedPoint)
					} else {
						perceivedObjects.put(intersectedArtifact.activityType, intersectedPoint)
						// info(intersectedArtifact.activityType)
					}
				}
				
				// Sending the Perception to the right Person
				emit(new Perception(position, orientation, linearSpeed, maxLinear, angularSpeed, maxAngular,
						this.bellRings, perceivedObjects, perceivedPeople), [it.UUID == uuid])
			}
			// After emitting all the Perceptions, we set the bellRings boolean to false
			this.bellRings = false
		}
	}

	// When getting an Influence from an agent
	on Influence {
		synchronized (this) {
			// The Influence is added to the list
			influenceList.add(occurrence)
			numberOfInfluencesGot++
			
			// If we got all the Influences
			if (numberOfInfluencesGot > numberOfInfluencesToGet-1) {
				// Starting the end of the loop
				emit(new RunEndOfStep)
			}
			
		}
	}

	// End of the loop
	on RunEndOfStep {
		synchronized (this) {
			applyInfluences(influenceList)
			numberOfInfluencesGot = 0
			influenceList.clear()
			
			Globals::LOOP_COUNTER++
			
			// Managing the minimal duration of a loop
			var sleepTime = Globals::LOOP_DURATION - Globals::chrono.getTime()
			if(sleepTime < 0) sleepTime = 0
			Thread::sleep(sleepTime) // We sleep before the next step
			
			// Shutting the application down when closing the application's window
			if (Globals::SHUT_DOWN_SIGNAL) {
				emit(new ShutDown)
			} else {
				// Move to next step
				emit(new RunBeginningOfStep)
			}
		}
	}
	
	// Used to update the person's tooltip
	on UpdatedActivity {
		synchronized(this){		
		this.graphHumans.get(occurrence.callerID).activity = occurrence.activity
		}
	}
	
	def spawnAPerson(name: String, graphHuman : GraphHuman, environment : GraphEnvironment, i : int) {	
		var id = spawnInContextWithID(typeof(Person),graphHuman.uuid,defaultContext,name,graphHuman.x,graphHuman.y,environment,Globals::LOOP_COUNTER+10*i)
		info(name + " spawned")
		numberOfInfluencesToGet++
		personIdList.add(id)
	}
	
	// Computing the Influences to send the actions to the agent and to update the graphical part
	def applyInfluences(influenceList: LinkedList<Influence>) {
		for (var i = 0; i < influenceList.size; i++) {
			var influence = influenceList.get(i)
			
			var newPosition : Point2f = influence.position + influence.linear
			
			// Updating the graphical part
			this.graphHumans.get(influence.callerID).moveTo(newPosition.x, newPosition.y, 2)
			this.graphHumans.get(influence.callerID).updateForceVector(influence.linear.x, influence.linear.y)
			
			// Hiding the person if he is in a building or under the trees
			if(this.graphHumans.get(influence.callerID).environment.isInCoveredArea(newPosition))
				this.graphHumans.get(influence.callerID).sethideInCoveredArea(true)
			else
				this.graphHumans.get(influence.callerID).sethideInCoveredArea(false)
			
			// Updating the agent
			emit(new ActionToPerson(newPosition.x, newPosition.y), [it.UUID == influence.callerID])
		}
	}

	on ShutDown {
		killMe()
	}

	on Destroy {
		info("The agent was stopped.")
	}
}
