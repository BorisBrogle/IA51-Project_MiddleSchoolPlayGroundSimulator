/** 
 * 
 */
package fr.utbm.ia51.agents

import fr.utbm.ia51.Globals
import fr.utbm.ia51.activities.ActivityManager
import fr.utbm.ia51.activities.ActivityType
import fr.utbm.ia51.agents.behaviors.KinematicSeekAlgorithm
import fr.utbm.ia51.agents.behaviors.KinematicWanderAlgorithm
import fr.utbm.ia51.agents.behaviors.SeekAlgorithm
import fr.utbm.ia51.agents.behaviors.WanderAlgorithm
import fr.utbm.ia51.agents.motion.FleeAlgorithm
import fr.utbm.ia51.agents.motion.KinematicFleeAlgorithm
import fr.utbm.ia51.environment.ActionToPerson
import fr.utbm.ia51.environment.Influence
import fr.utbm.ia51.environment.Perception
import fr.utbm.ia51.graph.environment.EnvironmentEntity
import fr.utbm.ia51.graph.environment.GraphEnvironment
import fr.utbm.ia51.tools.MotionAlgorithmOutput
import fr.utbm.ia51.tools.Point2f
import fr.utbm.ia51.tools.Vector2f
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft

// Person = corps, behavior = tete en gros
agent Person {
	uses Logging, DefaultContextInteractions
	
	var position : Point2f
	
	var directionVector : Vector2f
	//	var perceptionField = newRectangle 

	// the activity that the agent wants to perform
	var activityType : ActivityType
	var activityManager = new ActivityManager();
	
	// his target which depends on the his activity
	var target : Point2f

	// the maximum distance between the agent and its target for him to stop moving
	var maxTargetDistance = 0f
	
	
	
	//the environment in which the agent will live
	var environment : GraphEnvironment
	
//	var listOfAvailableArtifacts = <EnvironmentEntity>newArrayList
	var listPerceivedtArtifacts = <EnvironmentEntity>newArrayList

	// behaviors
	var seekBehavior : SeekAlgorithm
	var wanderBehavior : WanderAlgorithm
	var fleeBehavior : FleeAlgorithm
	// var b : Behavior
	
	on Initialize {
		synchronized (this) {
			// Event trigger before the agent begin to live or to be used.
			// You should put all the initialization statements in this block of code.
			loggingName = ""+occurrence.parameters.get(0)
			
			position = new Point2f(occurrence.parameters.get(1) as Double, occurrence.parameters.get(2) as Double)
			
			environment = occurrence.parameters.get(3) as GraphEnvironment 
			
			info("The agent was started.")
	
			this.activityType = this.activityManager.chooseActivity()
			info("The agent will do activity "+this.activityType)
			
			//Acquisition of target according to the Person's activity type
			this.target = this.environment.getArtifactFromActivity(this.activityType).randomPointInEntity
	
	
			this.seekBehavior = new KinematicSeekAlgorithm
			this.wanderBehavior = new KinematicWanderAlgorithm
			this.fleeBehavior = new KinematicFleeAlgorithm
			
				// b = new NormalBehavior(this)
				// b.registerBehavior
				
		}
	}
	
	def setActivity(act : ActivityType) : void {
		synchronized (this) {
			this.activityType = act
			this.target = getTarget(activityType)
		}
	}
	
	def getTarget(at : ActivityType) : Point2f {
		synchronized (this) {
			this.environment.getArtifactFromActivity(this.activityType).randomPointInEntity
		}
	}
	
	def emitInfluence(output: MotionAlgorithmOutput) {
		synchronized (this) {
			emit(new Influence(this.ID, 0, this.position, output.linear, output.angular))
		}
	}
	
	on Perception {
		synchronized (this) {
			var perceivedObjects = occurrence.perceivedObjects

			var targetMotionOutput = new MotionAlgorithmOutput
			var fleeMotionOutput = new MotionAlgorithmOutput

			// if the bell rings, setting the target to the classroom position
			if (occurrence.bellRings) {
				// TODO set the right classroom ?
				setActivity(ActivityType.CLASSLINE)
			}
			
			if (occurrence.position.distance(target) > this.maxTargetDistance) {
				if (this.target !== null) {
					// run the seek behavior
					targetMotionOutput = this.seekBehavior.run(
						 //TODO occurrence.position,
						 this.position,
						 occurrence.currentLinearSpeed,
						 occurrence.maxLinear,
						 target
					)
				} else {
					// run the wander behavior
				targetMotionOutput = this.wanderBehavior.run(
						//TODO occurrence.position,
						 this.position,
						 occurrence.orientation,
						 occurrence.currentLinearSpeed,
						 occurrence.maxLinear,
						 occurrence.currentAngularSpeed,
						 occurrence.maxAngular
					)
				}
				
				for (object : perceivedObjects) {
					// run the flee behavior
				var tmpFleeMotionOutput = this.fleeBehavior.run(
						// TODO occurrence.position,
						this.position,
						occurrence.currentLinearSpeed,
						occurrence.maxLinear,
						object
					)
					//TODO, check if it's the right way to add all the flee motions
					// adding every repulsive vector to the flee output
					fleeMotionOutput.linear += tmpFleeMotionOutput.linear 
				}

				//TODO, check if it's the right way to add all the motions together
				// taking the repulsive behavior into account
				targetMotionOutput.linear += fleeMotionOutput.linear
				
				// emitting an influence with the wanted motion
				this.emitInfluence(targetMotionOutput)
			} else {
				// emitting an influence with no motion in case we reached the target
				this.emitInfluence(new MotionAlgorithmOutput)
			}
		}
	}
	
	on ActionToPerson {
		synchronized (this) {
			var x = occurrence.newPosX as float
			var y = occurrence.newPosY as float
			// info("Person moving from {0,number,#.##}:{1,number,#.##} to {2,number,#.##}:{3,number,#.##}", position.x, position.y, x, y)
			this.position.set(x, y)
		}
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
