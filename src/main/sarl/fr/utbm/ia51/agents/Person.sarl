/** 
 * 
 */
package fr.utbm.ia51.agents

import fr.utbm.ia51.agents.behaviors.KinematicSeekAlgorithm
import fr.utbm.ia51.agents.behaviors.KinematicWanderAlgorithm
import fr.utbm.ia51.agents.behaviors.SeekAlgorithm
import fr.utbm.ia51.agents.behaviors.WanderAlgorithm
import fr.utbm.ia51.environment.ActionToPerson
import fr.utbm.ia51.environment.Influence
import fr.utbm.ia51.environment.Perception

import fr.utbm.ia51.graph.human.ActivityType
import fr.utbm.ia51.tools.MotionAlgorithmOutput
import fr.utbm.ia51.tools.Point2f
import fr.utbm.ia51.tools.Vector2f
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft


// Person = corps, behavior = tete en gros
agent Person {
	uses Logging, DefaultContextInteractions
	
	var posX : double = 0
	var posY : double = 0
	
	
	
//	var perceptionField = newRectangle 

	var activityType : ActivityType
	var target : Point2f
	
//	var listPerceivedEnvironmentArtifact : 

	// behaviors
	var seekBehavior : SeekAlgorithm
	var wanderBehavior : WanderAlgorithm
	// var b : Behavior
	
	var bellRings : boolean = false

	on Initialize {
		synchronized (this) {
			// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		loggingName = ""+occurrence.parameters.get(0)
		
		posX = occurrence.parameters.get(1) as Double
		posY = occurrence.parameters.get(2) as Double
		info("The agent was started.")

			this.activityType = ActivityType.FOOTBALL

			this.seekBehavior = new KinematicSeekAlgorithm
			this.wanderBehavior = new KinematicWanderAlgorithm
		
			// b = new NormalBehavior(this)
			// b.registerBehavior
		}
	}
	
	//TODO 
	def updateTarget() {
		synchronized (this) {
			this.target = getTarget(this.activityType)
		}
	}
	
	//TODO
	def getTarget(at : ActivityType) {
		new Point2f
	}
	
	def emitInfluence(output: MotionAlgorithmOutput) {
		synchronized (this) {
			emit(new Influence(this, 0, this.posX + 0.1, this.posY + 0.1))
		}
	}
	
	on Perception {
		
		
		
		
		synchronized (this) {
			var perceivedObjects = occurrence.perceivedObjects
			
			if (target !== null) {
				// run the seek behavior
				this.seekBehavior.run(
					 occurrence.position,
					 occurrence.currentLinearSpeed,
					 occurrence.maxLinear,
					 target
				).emitInfluence
			} else {
				// run the wander behavior
				this.wanderBehavior.run(
					 occurrence.position,
					 occurrence.orientation,
					 occurrence.currentLinearSpeed,
					 occurrence.maxLinear,
					 occurrence.currentAngularSpeed,
					 occurrence.maxAngular
				).emitInfluence
			}

			if (bellRings) {
				info("Sending an influence")
				this.seekBehavior.run(
				 	occurrence.position,
				 	occurrence.currentLinearSpeed,
				 	occurrence.maxLinear,
			 		target
				).emitInfluence
				
				/* behavior example
				b.unregisterBehavior
				b = new goToClassBehavior(this)
				b.registerBehavior
				*/
			}
		}
	}
	
	on ActionToPerson {
		synchronized (this) {
			var x = occurrence.newPosX
			var y = occurrence.newPosY
			info("Person moving from {0,number,#.##}:{1,number,#.##} to {2,number,#.##}:{3,number,#.##}", this.posX, this.posY, x, y)
			this.posX = x
			this.posY = y
		}
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
