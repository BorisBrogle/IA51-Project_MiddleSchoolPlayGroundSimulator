/** 
 * 
 */
package fr.utbm.ia51.agents

import fr.utbm.ia51.environment.Influence
import fr.utbm.ia51.environment.Perception
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.Behaviors
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.lang.core.Behavior
import fr.utbm.ia51.environment.ActionToPerson

// Person = corps, behavior = tete en gros
agent Person {
	uses Logging, DefaultContextInteractions, Behaviors
	
	var posX : double = 0
	var posY : double = 0
	
	var b: Behavior
	var bellRings = true

	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		loggingName = ""+occurrence.parameters.get(0)
		info("The agent was started.")

//		b = new NormalBehavior(this)
//		b.registerBehavior
	}
	
	def sendInfluence() {
		synchronized (this) {
			emit(new Influence(this, 0, this.posX + 0.1, this.posY + 0.1))
		}
	}
	
	on Perception {
		if (bellRings) {
			info("Sending an influence")
			sendInfluence
			/*
			b.unregisterBehavior
			b = new goToClassBehavior(this)
			b.registerBehavior
			*/
		}
	}
	
	on ActionToPerson {
		synchronized (this) {
			this.posX = occurrence.newPosX
		}
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
