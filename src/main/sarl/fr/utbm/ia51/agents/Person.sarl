/** 
 * 
 */
package fr.utbm.ia51.agents

import fr.utbm.ia51.Globals
import fr.utbm.ia51.activities.ActivityManager
import fr.utbm.ia51.activities.ActivityType
import fr.utbm.ia51.agents.motion.AvoidAlgorithm
import fr.utbm.ia51.agents.motion.FleeAlgorithm
import fr.utbm.ia51.agents.motion.KinematicAvoidAlgorithm
import fr.utbm.ia51.agents.motion.KinematicFleeAlgorithm
import fr.utbm.ia51.agents.motion.KinematicSeekAlgorithm
import fr.utbm.ia51.agents.motion.KinematicWanderAlgorithm
import fr.utbm.ia51.agents.motion.SeekAlgorithm
import fr.utbm.ia51.agents.motion.WanderAlgorithm
import fr.utbm.ia51.environment.ActionToPerson
import fr.utbm.ia51.environment.Influence
import fr.utbm.ia51.environment.Perception
import fr.utbm.ia51.environment.ShutDown
import fr.utbm.ia51.environment.UpdatedActivity
import fr.utbm.ia51.graph.environment.GraphEnvironment
import fr.utbm.ia51.tools.MotionAlgorithmOutput
import fr.utbm.ia51.tools.Point2f
import fr.utbm.ia51.tools.Vector2f
import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft

import tools.Chrono

import fr.utbm.ia51.tools.Vector2f
import fr.utbm.ia51.Statistic

// Person = corps, behavior = tete en gros
agent Person {
	uses Logging, DefaultContextInteractions, Lifecycle
	
	var position : Point2f
	
	var directionVector : Vector2f
	//	var perceptionField = newRectangle 

	// the activity that the agent wants to perform
	var activityType : ActivityType
	var activityManager = new ActivityManager()
	var activityChrono = new Chrono()
	
	var motionlessChrono : Chrono = new Chrono()
	var wasMotionless = false
	
	// his target which depends on the his activity
	var target : Point2f

	// the maximum distance between the agent and its target for him to stop moving (min 2f)
	var maxTargetDistance = 2f
	
	//STATISTIC the distance walked by the agent, its time, etc
	var walkedDistance = 0f
	var walkedChrono = new Chrono()
	var hasReachedActivity : boolean
	/*var nbActivitySet = 0
	var nbActivityReached = 0*/
	
	var isInClass : boolean
	
	//the environment in which the agent will live
	var environment : GraphEnvironment
	
//	var listOfAvailableArtifacts = <EnvironmentEntity>newArrayList
//	var listPerceivedtArtifacts = <EnvironmentEntity>newArrayList

	// behaviors
	var seekBehavior : SeekAlgorithm
	var wanderBehavior : WanderAlgorithm
	var fleeBehavior : FleeAlgorithm
	var avoidBehavior : AvoidAlgorithm
	// var b : Behavior
	
	on Initialize {
		synchronized (this) {
			// Event trigger before the agent begin to live or to be used.
			// You should put all the initialization statements in this block of code.
			loggingName = ""+occurrence.parameters.get(0)
			
			position = new Point2f(occurrence.parameters.get(1) as Double, occurrence.parameters.get(2) as Double)
			
			environment = occurrence.parameters.get(3) as GraphEnvironment 
			
			info("The agent was started.")
	
			this.setActivity(this.activityManager.chooseActivity())
			info("The agent will do activity "+this.activityType)
			
			//Acquisition of target according to the Person's activity type
			this.target = this.getNewTarget
	
			this.isInClass = false
	
			this.seekBehavior = new KinematicSeekAlgorithm
			this.wanderBehavior = new KinematicWanderAlgorithm
			this.fleeBehavior = new KinematicFleeAlgorithm
			this.avoidBehavior = new KinematicAvoidAlgorithm
			
				// b = new NormalBehavior(this)
				// b.registerBehavior
				
		}
	}
	
	def setActivity(act : ActivityType) : void {
		synchronized (this) {
			this.activityType = act
			this.target = getNewTarget(activityType)
			emit(new UpdatedActivity(this.ID, this.activityType))
			this.hasReachedActivity = false
			Statistic::countActivityTypeSet(this.activityType)
			Globals::TOT_SET_TARGET++
		}
	}
	
	def getNewTarget(at : ActivityType) : Point2f {
		synchronized (this) {
			this.environment.getArtifactFromActivity(at).randomPointInEntity
		}
	}
	def getNewTarget() : Point2f {
		synchronized (this) {
			this.environment.getArtifactFromActivity(this.activityType).randomPointInEntity
		}
	}
	
	def emitInfluence(output: MotionAlgorithmOutput) {
		synchronized (this) {
			emit(new Influence(this.ID, 0, this.position, output.linear, output.angular))
		}
	}
	
	on Perception {
		synchronized (this) {
			var perceivedObjects = occurrence.perceivedObjects

			var targetMotionOutput = new MotionAlgorithmOutput
			var fleeMotionOutput = new MotionAlgorithmOutput
			var avoidMotionOutput = new MotionAlgorithmOutput

			if (occurrence.bellRings && !this.isInClass) {
				// TODO set the right classroom ?
				this.setActivity(ActivityType.CLASSLINE)
				this.isInClass = true
				info("The agent will go back to the CLASSLINE")
			} else if (occurrence.bellRings && this.isInClass) {
				this.setActivity(this.activityManager.chooseActivity())
				this.isInClass = false
				info("The agent will do activity " + this.activityType)
			}

			if (occurrence.position.distance(target) > this.maxTargetDistance) {
				if (this.target !== null) {
					// run the seek behavior
					targetMotionOutput = this.seekBehavior.run(
						 // TODO occurrence.position,
						occurrence.position,
						occurrence.currentLinearSpeed,
						occurrence.maxLinear,
						this.target
					)
				} else {
					// run the wander behavior
				targetMotionOutput = this.wanderBehavior.run(
						occurrence.position,
						occurrence.orientation,
						occurrence.currentLinearSpeed,
						occurrence.maxLinear,
						occurrence.currentAngularSpeed,
						occurrence.maxAngular
					)
				}
				
				for (entry : perceivedObjects.entrySet) {
					// run the flee behavior
					// check to no to flee our activity
					if (entry.key != this.activityType) {
						var tmpFleeMotionOutput = this.fleeBehavior.run(
							occurrence.position,
							occurrence.currentLinearSpeed,
							occurrence.maxLinear,
							// nearest object's to flee point
							entry.value
						)
						// TODO, check if it's the right way to add all the flee motions
						// adding every repulsive vector to the flee output
						fleeMotionOutput.linear += tmpFleeMotionOutput.linear
						
						var tmpAvoidMotionOutput = this.avoidBehavior.run(
							occurrence.position,
							occurrence.currentLinearSpeed,
							occurrence.maxLinear,
							this.target,
							// nearest object's to flee point
							entry.value
						)

						avoidMotionOutput.linear += tmpAvoidMotionOutput.linear
					}
				}
				// setting the flee and avoid vectors to the right length
				if (fleeMotionOutput.linear.length > 0) {
					fleeMotionOutput.linear.length = occurrence.maxLinear
				}
				if (avoidMotionOutput.linear.length > 0) {
					avoidMotionOutput.linear.length = occurrence.maxLinear
				}

				// taking the repulsive behavior into account
				targetMotionOutput.linear += fleeMotionOutput.linear
				
				// taking the avoiding behavior into account
				targetMotionOutput.linear += avoidMotionOutput.linear
				
				// setting the resulting vector to the right length
				targetMotionOutput.linear.length = occurrence.maxLinear
				
				// emitting an influence with the wanted motion
				this.emitInfluence(targetMotionOutput)
			} else {
				// emitting an influence with no motion in case we reached the target
				this.emitInfluence(new MotionAlgorithmOutput)
				
				if (!this.hasReachedActivity) {
					Statistic::countActivityTypeReached(this.activityType)
					Globals::TOT_REACHED_TARGET++
					this.hasReachedActivity = true
				}
			}
		}
	}
	
	on ActionToPerson {
		synchronized (this) {
			var x = occurrence.newPosX as float
			var y = occurrence.newPosY as float
			
			var nextPos = new Point2f(x, y)
			var distanceVec = this.position-nextPos
			walkedDistance += distanceVec.length
			
			//info("Person moving from {0,number,#.##}:{1,number,#.##} to {2,number,#.##}:{3,number,#.##}", position.x, position.y, x, y)

			if(position.x == x && position.y == y) { //The person hasn't moved this loop
				this.stayMotionlessOrNot
			} else {
				this.motionlessChrono.reset()
				wasMotionless = false
			}
			
			this.position.set(x, y)
			this.updateActivity()
		}
	}
	
	
	def stayMotionlessOrNot() {
		synchronized (this) {
			if (this.wasMotionless) {
				var timePassed = this.motionlessChrono.getTime()
				var randomValue = Globals::randomGenerator.getRandom(0, Globals::IMMOBILITY_TIME * 1000)
				if (timePassed > randomValue) {
					this.target = this.getNewTarget
				}
				this.motionlessChrono.reset()
			} else {
				this.wasMotionless = true
			}
		}
	}
	
	
	def updateActivity() {
		var timePassed = this.activityChrono.getTime()
		var randomValue = Globals::randomGenerator.getRandom(0, Globals::ACTIVITY_CHANGE_FREQUENCY*1000)
		if(timePassed > randomValue) {
			this.activity = activityManager.chooseActivity
		}
		this.activityChrono.reset()
	}

	def getActivityReached(){
		
	}

	on ShutDown {
		killMe();
	}

	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
