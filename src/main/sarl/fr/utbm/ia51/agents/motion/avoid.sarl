package fr.utbm.ia51.agents.motion

import fr.utbm.ia51.Globals
import fr.utbm.ia51.tools.Calculations2D
import fr.utbm.ia51.tools.MotionAlgorithmOutput
import fr.utbm.ia51.tools.Point2f

/** 
 * Avoid Behavior.
 * 
 * @author Yann
 */
interface AvoidAlgorithm {

			/** 
		 * @param position is the current position of the entity.
		 * @param linearSpeed is the current linear speed of the entity.
		 * @param maxLinear is the maximal linear speed or acceleration (depending on getType()) of the entity.
		 * @param target is the point to reach.
		 * @param nearestPoint is the nearest point of the entity to avoid
		 * @return the behaviour output.
		 */
	def run(position : Point2f, linearSpeed : float, maxLinear : float, target : Point2f, nearestPoint : Point2f) : MotionAlgorithmOutput

}

/** 
 * @author Yann
 */
class KinematicAvoidAlgorithm implements AvoidAlgorithm {
	override run(position : Point2f, linearSpeed : float, maxLinear : float, target : Point2f, nearestPoint : Point2f) : MotionAlgorithmOutput {
		var output = new MotionAlgorithmOutput()
		
		// center point of the map
		var centerPoint = new Point2f(Globals.WIDTH / 2, Globals.HEIGHT / 2)

		// point that intersects the normal of (position - nearestPoint) going through nearestPoint and the line (centerPoint - target) going through centerPoint
		var intersectionPoint = Calculations2D::perpendicularLineLineIntersection(position, nearestPoint, centerPoint, target, nearestPoint, centerPoint)
		
		// case of normal and second lines are parallels
		if(intersectionPoint.x < 0) {
			intersectionPoint = centerPoint
		}
		
		var normalDirection = intersectionPoint - nearestPoint
		
		normalDirection.length = maxLinear

		output.linear = normalDirection

		return output
	}

}
